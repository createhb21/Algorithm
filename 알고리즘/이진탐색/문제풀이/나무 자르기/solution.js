const fs = require("fs");
let input = fs.readFileSync("./input.txt").toString().trim().split("\n");

// 둘째 줄에는 나무의 높이가 주어진다.
// 나무의 높이의 합은 항상 M보다 크거나 같기 때문에,
// 상근이는 집에 필요한 나무를 항상 가져갈 수 있다.
// 높이는 1,000,000,000보다 작거나 같은 양의 정수 또는 0이다.

// 적어도 7미터의 나무를 집에 가져가기 위해서,
// "절단기에 설정할 수 있는 "높이의 최댓값"을 출력한다.""

// ------------------------------------------------

// 나무 자르기 문제의 목표: 적절한 높이 값을 찾기
// 높이를 15로 설정한 경우, 총 7만큼의 나무를 얻을 수 있다.
// 1. 절단기의 높이가 올라가는 경우: 일반적으로 얻을 수 있는 나무의 양이 감소한다.
// 2. 절단기의 높이가 내려가는 경우: 일반적으로 얻을 수 있는 나무의 양이 증가한다.
// -> 파라매트릭 서치를 이용한다.

// ------------------------------------------------

// 4 7
// 20 15 10 17

// ------------------------------------------------

let n = Number(input[0].split(" ")[0]); // 나무의 수 n
let m = Number(input[0].split(" ")[1]); // 가져가고자 하는 나무 총 길이 m

let arr = input[1].split(" ").map(Number); // 각 나무의 높이

let start = 0; // 이진 탐색을 위한 시작점과 끝점 설정
let end = arr.reduce((a, b) => Math.max(a, b)); // 20

let result = 0;
while (start <= end) {
  let mid = parseInt((start + end) / 2); // 현재의 중간점
  let total = 0; // mid로 잘랐을 때 얻을 수 있는 나무의 양 계산
  for (x of arr) {
    let rest = x - mid;
    if (x > mid) {
      total += rest;
    }
  }
  if (total < m) {
    // 나무의 양이 부족한 경우 더 많이 자르기 (높이 줄이기)
    end = mid - 1;
  } else {
    // 나무의 양이 충분한 경우 덜 자르기 (높이 키우기)
    result = mid;
    start = mid + 1;
  }
}
console.log(result);
